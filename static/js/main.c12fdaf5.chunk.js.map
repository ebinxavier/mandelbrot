{"version":3,"sources":["plot.js","mandelbrot.js","App.js","useWasm.js","reportWebVitals.js","index.js"],"names":["getMousePosition","canvas","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","colors","gradient","rgb","map","color","toRgbString","getColor","alpha","index","Math","floor","mandelBrot","c","MAX_ITERATION","z","n","abs","add","pow","getImage","DIM","a","RE_START","RE_END","IM_START","IM_END","image2D","startTime","performance","now","complex","intensity","push","delta","toFixed","App","canvasRef","useRef","useState","setImage2D","loading","setLoading","clip","setClip","mouseCoordinates","setMouseCoordinates","timeTaken","setTimeTaken","enableWASM","ITR","setITR","wasm","state","setState","useEffect","fetch","AsBind","instantiate","consoleLog","message","console","log","instance","exports","fetchWasm","useWasm","draw","ctx","imageArray","fillStyle","clearRect","width","height","forEach","pixel","fillRect","fill","plotImage","strokeStyle","strokeRect","plotBox","handleMouseMove","useCallback","debounce","current","setTimeout","context","getContext","window","cancelAnimationFrame","animationFrameId","start","split","Number","then","style","padding","textAlign","border","display","onMouseMove","onClick","X","Y","D","W","ref","fontSize","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c12fdaf5.chunk.js","sourcesContent":["import gradient from \"tinygradient\";\n\nexport const plotImage = (ctx, imageArray = []) => {\n  // imageArray[] = {x,y,color:{r,g,b,a}}[]\n  ctx.fillStyle = \"rgba(255,255,255,255)\";\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  imageArray.forEach((pixel) => {\n    ctx.fillStyle = getColor(pixel.intensity);\n    ctx.fillRect(pixel.x, pixel.y, 1, 1);\n  });\n  ctx.fill();\n};\n\nexport const plotBox = (ctx, { x, y }, DIM) => {\n  ctx.strokeStyle = \"#000000\";\n  ctx.strokeRect(x - DIM / 8, y - DIM / 8, DIM / 4, DIM / 4);\n  ctx.fill();\n};\n\nexport const getMousePosition = (canvas, event) => {\n  let rect = canvas.getBoundingClientRect();\n  let x = event.clientX - rect.left;\n  let y = event.clientY - rect.top;\n  return { x, y };\n};\n\nconst generator = gradient([\n  \"#ff5f18\",\n  \"#e98d10\",\n  \"#dae046\",\n  \"#617bb3\",\n  \"#555ddd\",\n]);\nconst colors = generator.rgb(256).map((color) => color.toRgbString());\nconst getColor = (alpha) => {\n  const index = Math.floor(alpha);\n  if (index <= 0) {\n    return \"rgba(0,0,0)\";\n  }\n  return colors[index];\n};\n","import { complex, abs, add, pow } from \"mathjs\";\n\nconst mandelBrot = (c, MAX_ITERATION) => {\n  let z = 0;\n  let n = 0;\n  while (abs(z) <= 2 && n < MAX_ITERATION) {\n    z = add(pow(z, 2), c);\n    n += 1;\n  }\n  return n;\n};\n\nexport const getImage = async (\n  { RE_START, RE_END, IM_START, IM_END },\n  MAX_ITERATION,\n  DIM\n) => {\n  const image2D = [];\n  const startTime = performance.now();\n  for (let x = 0; x < DIM; x++) {\n    for (let y = 0; y < DIM; y++) {\n      let c = complex(\n        IM_START + (y / DIM) * (IM_END - IM_START),\n        RE_START + (x / DIM) * (RE_END - RE_START)\n      );\n      const intensity = mandelBrot(c, MAX_ITERATION);\n      image2D.push({\n        y: x,\n        x: y,\n        intensity: ((MAX_ITERATION - intensity) / MAX_ITERATION) * 255,\n      });\n    }\n  }\n\n  return {\n    image2D,\n    delta: ((performance.now() - startTime) / 1000).toFixed(2),\n  };\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { plotImage, plotBox, getMousePosition } from \"./plot\";\nimport { getImage } from \"./mandelbrot\";\nimport { debounce } from \"lodash\";\nimport { useWasm } from \"./useWasm\";\n\nconst MAX_ITERATION = 30;\nconst DIM = 300;\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [image2D, setImage2D] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [clip, setClip] = useState({\n    RE_START: -1.5,\n    RE_END: 1.5,\n    IM_START: -2.2,\n    IM_END: 0.8,\n  });\n  const [mouseCoordinates, setMouseCoordinates] = useState();\n  const [timeTaken, setTimeTaken] = useState();\n  const [enableWASM, setEnableWASM] = useState(false);\n  const [ITR, setITR] = useState(MAX_ITERATION);\n\n  const wasm = useWasm();\n\n  const draw = (ctx) => {\n    plotImage(ctx, image2D);\n    if (mouseCoordinates) plotBox(ctx, mouseCoordinates, DIM);\n  };\n\n  const handleMouseMove = useCallback(\n    debounce((event) => {\n      const { x, y } = getMousePosition(canvasRef.current, event);\n      setTimeout(() => {\n        setMouseCoordinates({ x, y });\n      });\n    }, 10),\n    []\n  );\n  const zoomImage = (event) => {\n    const { x, y } = getMousePosition(canvasRef.current, event);\n    const { RE_START, IM_START, IM_END } = clip;\n    let X = (x - DIM / 8) / DIM; // Finds left top of box\n    let Y = (y - DIM / 8) / DIM;\n    const D = IM_END - IM_START; // current complex window dimension\n    X *= D; // Scale to complex plane\n    Y *= D;\n    X += IM_START;\n    Y += RE_START;\n    const W = D / 4;\n    const newClip = { RE_START: Y, RE_END: Y + W, IM_START: X, IM_END: X + W };\n    setClip(newClip);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    let animationFrameId;\n    draw(context);\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [mouseCoordinates, image2D]);\n\n  useEffect(() => {\n    if (!clip) return;\n    setLoading(true);\n    if (enableWASM && wasm) {\n      const start = performance.now();\n      const image = wasm?.getImage(\n        clip.RE_START,\n        clip.RE_END,\n        clip.IM_START,\n        clip.IM_END,\n        ITR,\n        DIM\n      );\n      const image2D = image.map((pixel) => {\n        const [x, y, intensity] = pixel.split(\",\");\n        return { x: Number(x), y: Number(y), intensity: Number(intensity) };\n      });\n      setImage2D(image2D);\n      setLoading(false);\n      setTimeTaken(((performance.now() - start) / 1000).toFixed(2));\n      console.log(\"Using WASM\");\n      setITR(ITR + 5);\n    }\n    if (!enableWASM) {\n      setTimeout(() => {\n        getImage(clip, ITR, DIM).then(({ image2D, delta }) => {\n          setImage2D(image2D);\n          setLoading(false);\n          setTimeTaken(delta);\n          console.log(\"Using JS\");\n        });\n        setITR(ITR + 5);\n      });\n    }\n  }, [clip, wasm]);\n\n  return (\n    <div style={{ padding: \"0 20px\", textAlign: \"center\" }}>\n      <h1>Mandelbrot Fractal </h1>\n      <p>Select area to zoom in</p>\n      <br />\n      <div\n        style={{\n          padding: 10,\n          border: \"1px solid #555555\",\n          display: \"inline-block\",\n        }}\n      >\n        <canvas\n          onMouseMove={handleMouseMove}\n          onClick={zoomImage}\n          ref={canvasRef}\n          width={DIM}\n          height={DIM}\n        />\n      </div>\n      <div>\n        {loading ? (\n          <span style={{ fontSize: 15 }}>Rendering...</span>\n        ) : (\n          timeTaken && (\n            <span style={{ fontSize: 15 }}>\n              Last render time: {timeTaken} Sec\n            </span>\n          )\n        )}\n        <br />\n        <br />\n        <button onClick={() => window.location.reload()}>RESET</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport { AsBind } from \"as-bind\";\n\nexport const useWasm = () => {\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    const fetchWasm = async () => {\n      try {\n        const wasm = await fetch(\"fractal.wasm\");\n        const instance = await AsBind.instantiate(wasm, {\n          index: {\n            consoleLog: (message) => {\n              console.log(message);\n            },\n          },\n        });\n        setState(instance.exports);\n      } catch (e) {\n        console.log(`error`, e);\n      }\n    };\n    fetchWasm();\n  }, []);\n  return state;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}